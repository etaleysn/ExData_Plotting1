missing<- is.na(lines["Ozone"]) = TRUE
missing<- [is.na(lines["Ozone"]) = TRUE]
missing<- is.na(lines["Ozone"])
lines[missing]
lines[missing,"Ozone"]
missing<- is.na(lines["Ozone"])
missing
missing<- is.na(lines["Ozone"])
missing<- is.na(lines["Ozone"])+ 0
missing
missing<- sum(is.na(lines["Ozone"])+ 0)
missing
missing<- complete.cases(lines["Ozone"])
missing
lines["Ozone",missing]
lines["Ozone"],[missing]
ozone <-lines["Ozone"]
ozone[missing]
ozone1 <-lines["Ozone"]
ozone1[missing]
good <-complete.cases(lines["Ozone"])
god
good
ozone1[good,]
ozone1[good,][1:6,]
ozone1[good,][1,]
ozone1[good,][1]
ozone1[good,]
mean(ozone1[good,])
lines
subset <- lines["Ozone" > 31]
subset
subset <- lines[Ozone > 31]
subset <- lines[[1] > 31]
subset(lines, Temp > 90,Ozone > 31 select = c(Ozone, Temp))
subset(lines, Temp > 90,Ozone > 31, select = c(Ozone, Temp))
subset(lines, Temp > 90, select = c(Ozone, Temp))
subset(lines, Temp > 90, select = Ozone:Day)
subset(lines, Temp > 90, Ozone > 31, select = Ozone:Day)
subset(lines, Temp > 90 &Ozone > 31, select = Ozone:Day)
mean(subset(lines, Temp > 90 &Ozone > 31, select = Solar.R))
subset(lines, Temp > 90 &Ozone > 31, select = Solar.R)
lapply(subset(lines, Temp > 90 &Ozone > 31, select = Solar.R),mean,na.rm = TRUE)
subset(lines, Month = 6, select = temp)
subset(lines, Month = 6, select = "Temp")
subset(lines, Month = 6, select = Temp)
subset(lines, Temp > 90 &Ozone > 31, select = Solar.R)
subset(lines, Month = 6, select = Temp)
subset(lines, Month = "6", select = Temp)
subset(lines, Month = 6, select = temp)
subset(lines, Month = 6, select = Temp)
subset(lines, Month = 6, select = Ozone:Day)
subset(lines, Month >= 6, select = Ozone:Day)
subset(lines, Month <= 6, select = Ozone:Day)
subset(lines, Month = 6, select = Ozone:Day)
subset(lines, Month <7 & Month > 5 , select = Ozone:Day)
subset(lines, Month == 6 , select = Ozone:Day)
lapply(subset(lines, Month ==6 , select = Temp),mean,na.rm = TRUE)
lapply(subset(lines, Month ==5 , select = Temp),max,na.rm = TRUE)
lapply(subset(lines, Month ==5 , select = Ozone),max,na.rm = TRUE)
lines <- read.csv("hw1_data.csv", header=TRUE,sep=",")[1:2]
lines
lines <- read.csv("hw1_data.csv", header=TRUE,sep=",")
lines <- read.csv("hw1_data.csv", header=TRUE,sep=",")[1:2,]
lines
lines <- read.csv("hw1_data.csv", header=TRUE,sep=",")[153:154,]
lines
lines <- read.csv("hw1_data.csv", header=TRUE,sep=",")[152:153,]
lines
nrows(read.csv("hw1_data.csv", header=TRUE,sep=","))
nrow(read.csv("hw1_data.csv", header=TRUE,sep=","))
tail(read.csv("hw1_data.csv", header=TRUE,sep=","),2)
head(read.csv("hw1_data.csv", header=TRUE,sep=","),2)
swirl()
x<- c(44, NA, 5, NA)
x*3
y <-rnorm(1000)
z<-rep(NA,1000)
my_data <-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
a <- matrix(1:20,nrow = 4, ncol=5)
a <- matrix(data = 1:20,nrow = 4, ncol=5)
a <- matrix(data = 1:20,nrow = 4, ncol=5, byrow= FALSE, dimnames = NULL)
my_matrix2 <- matrix(data = 1:20,nrow = 4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colnames(my_data) <- cnames
my_data
swirl()
exit
swirl()
TRUE == TRUE
FALSE == TRUE
(FALSE==TRUE) == FALSE
6 ==7
6 <7
10 <=10
5 != 7
5 NOT ! 7
NOT 5 = 7
!TRUE (5 = 7)
!TRUE (5 == 7)
TRUE (5 != 7)
info()
NOT (5==7)
NOT TRUE (5==7)
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!8 && 4 > 3.9
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all ( ints > 0)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
f(3)
f(4)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
args(h)
swirl()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags,class)
cls_list
class(cls_list)
as.character((cls_list))
as.character(cls_list)
sapply(cls_vect)
?sapply
cls_list <-sapply(flags,class)
cls_vect <-sapply(flags,class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range
)
sapply(flag_shapes,range)
shape_mat <-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length())
lapply(unique_vals, length
)
sapply(unique_vals, length)
sapply((flags))
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
landmass <- table(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
tapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, "virginica", mean)
tapply(iris$Sepal.Length, 'virginica', mean)
groups <- split(iris, c(setosa, versicolor, virginica))
groups <- split(iris, c('setosa', 'versicolor', 'virginica'))
groups
groups <- split(iris, unique(iris$Species))
groups
unique(iris$Species)
groups <- split(iris, unique(iris$Species[,3]))
groups <- split(iris, unique(iris$Species[3]))
groups
tapply(iris$Sepal.Length,iris$Species = 'virginica' , mean)
tapply(iris$Sepal.Length,iris$Species == 'virginica' , mean)
iris$Species == 'virginica'
tapply(iris$Sepal.Length[iris$Species == 'virginica'] , mean)
sapply(iris$Sepal.Length[iris$Species == 'virginica'] , mean)
> iris$Sepal.Length[iris$Species == 'virginica']
iris$Sepal.Length[iris$Species == 'virginica']
mean(iris$Sepal.Length[iris$Species == 'virginica']
)
iris
str(iris)
View(iris)
View(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris$Sepal.Length[iris$Species == 'virginica'], mean)
apply(iris$Sepal.Length[iris$Species == 'virginica'], mean)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(iris, "iris.xlsx")
getwd()
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, average)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$hp, mtcars$cyl, average)[8]
averages <-tapply(mtcars$hp, mtcars$cyl, average)
averages <-tapply(mtcars$hp, mtcars$cyl, mean)[1]
averages
tapply(mtcars$hp, mtcars$cyl, mean)[3] -tapply(mtcars$hp, mtcars$cyl, mean1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] -tapply(mtcars$hp, mtcars$cyl, mean)[1]
debug(ls)
ls
debug(ls)
debug(ls)
q
q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select (-(x:size))
select (cran,-(x:size))
select(cran, -x:size)
select(cran, -X:size)
select(cran, -(X:size))
filter(cran,package =="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country = 'US' | country == "IN")
filter(cran, country == 'US' | country == "IN")
filter(cran, size > 100500 and r_os == "linux-gnu")
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(!is.na())
filter(cran, !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country (ascending), r_version (descending), ip_id (ascending))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size /2^20)
mutate(cran3, size_mb = size /2^20, size_gb = size_mb /2^20)
mutate(cran3, size_mb = size /2^20, size_gb = size_mb /2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran3, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1
plot1()
?tempfile
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
data()
head(data())
head(data)
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
View(plot1)
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
as.Date('2007-02-01', "%y-%m-%d")
as.Date('2007/02/01', "%y/%m/%d")
?as.Date
as.Date('2007/02/01', "%yyyy/%m/%d")
as.Date('2007/02/01', "%yy/%m/%d")
format(Sys.Date(), "%a %b %d")
as.Date('07/02/01', "%y/%m/%d")
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
plot1()
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
getwd()
setwd("E:/GitHub/ExData_Plotting1/")
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
?hist
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
getwd()
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot1.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
View(targetdata)
?plot
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
library(dplyr)
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot2.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
?lines
View(targetdata)
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
source('E:/GitHub/ExData_Plotting1/plot3.R')
debugSource('E:/GitHub/ExData_Plotting1/plot3.R')
